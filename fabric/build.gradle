plugins {
	id "com.github.johnrengelman.shadow" version "7.1.2"

	id "com.modrinth.minotaur" version "1.2.1"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

repositories {
	maven {
		url = "https://api.modrinth.com/maven"
	}
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
	modCompileOnly "maven.modrinth:fabrishot:${rootProject.fabrishot_version}"
	modCompileOnly fabricApi.module("fabric-api-base", rootProject.fabric_version)

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier "fabric"
}

jar {
	classifier "dev"
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenFabric(MavenPublication) {
			artifactId = rootProject.archives_base_name + "-" + project.name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
	}
}

import com.modrinth.minotaur.TaskModrinthUpload
// TODO: infer from fabric.mod.json?!
def supportedVersions = [
		"1.17", "1.17.1", "1.18", "1.18.1"]
def versionSupportName = "(Fabric 1.17+)"

task publishModrinth(type: TaskModrinthUpload) {
	dependsOn remapJar
	onlyIf {
		System.getenv("MODRINTH_TOKEN")
	}

	token = System.getenv("MODRINTH_TOKEN")
	projectId = rootProject.modrinth_id
	versionNumber = rootProject.mod_version + "+fabric"
	uploadFile = remapJar
	for (version in supportedVersions) {
		addGameVersion(version)
	}
	addLoader("fabric")
	detectLoaders = false
	versionName = rootProject.mod_version + " " + versionSupportName
	changelog = rootProject.ext.changelog
}

publish.dependsOn(publishModrinth)

if (System.getenv("CURSEFORGE_TOKEN")) {
	curseforge {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
		project {
			id = rootProject.curseforge_id_fabric
			releaseType = "release"

			mainArtifact(remapJar) {
				displayName = rootProject.mod_version + " " + versionSupportName
			}
			for (version in supportedVersions) {
				addGameVersion(version)
			}
			addGameVersion("Fabric")
			changelog = rootProject.ext.changelog
			changelogType = "markdown"
		}
	}

	publish.dependsOn(tasks.named("curseforge"))
}

configurations {
	remapJarOutput {
		canBeConsumed = true
		canBeResolved = false
	}
}

artifacts {
	remapJarOutput(remapJar) // For consumption by github release
}