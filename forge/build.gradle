plugins {
	id "com.github.johnrengelman.shadow" version "5.0.0"

	id "com.modrinth.minotaur" version "1.2.1"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

configurations {
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	useFabricMixin = true
	mixinConfig "screenshotclipboard-common.mixins.json"
	mixinConfig "screenshotclipboard-forge.mixins.json"
}

tasks.withType(JavaCompile) {
	// Wow I hate this
	// Remaps some stuff manually because mixin can't remap some stuff without remapping and other stuff and SRG doesn't do well with lambda synthetic methods
	// Don't look at this nothing to see here thanks
	inputs.file("cursedLambdaMap.tiny")
	options.compilerArgs += ["-AinMapExtraFilesNamedIntermediary=${project.file("cursedLambdaMap.tiny").absolutePath}"]
}

dependencies {
	forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

	implementation(project(path: ":common")) {
		transitive = false
	}
	developmentForge(project(path: ":common")) {
		transitive = false
	}
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
		transitive = false
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

shadowJar {
	exclude "fabric.mod.json"

	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier "forge"
}

jar {
	classifier "dev"
}

java {
	withSourcesJar()
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = rootProject.archives_base_name + "-" + project.name
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				classifier null
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
	}
}

import com.modrinth.minotaur.TaskModrinthUpload
def supportedVersions = [
		"1.16.2", "1.16.3", "1.16.4", "1.16.5"]
def versionSupportName = "(Forge 1.16)"

task publishModrinth(type: TaskModrinthUpload) {
	dependsOn remapJar
	onlyIf {
		System.getenv("MODRINTH_TOKEN")
	}

	token = System.getenv("MODRINTH_TOKEN")
	projectId = rootProject.modrinth_id
	versionNumber = rootProject.mod_version + "+forge"
	uploadFile = remapJar
	versionName = rootProject.mod_version + " " + versionSupportName
	for (version in supportedVersions) {
		addGameVersion(version)
	}
	addLoader("forge")
	detectLoaders = false
	changelog = rootProject.ext.changelog
}

publish.dependsOn(publishModrinth)

if (System.getenv("CURSEFORGE_TOKEN")) {
	curseforge {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
		project {
			id = rootProject.curseforge_id_forge
			releaseType = "release"

			mainArtifact(remapJar) {
				displayName = rootProject.mod_version + " " + versionSupportName
			}
			for (version in supportedVersions) {
				addGameVersion(version)
			}
			addGameVersion("Forge")
			changelog = rootProject.ext.changelog
			changelogType = "markdown"
		}
	}

	publish.dependsOn(tasks.named("curseforge"))
}

configurations {
	remapJarOutput {
		canBeConsumed = true
		canBeResolved = false
	}
}

artifacts {
	remapJarOutput(remapJar) // For consumption by github release
}