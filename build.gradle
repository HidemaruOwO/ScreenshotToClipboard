plugins {
	id "architectury-plugin" version "3.2-SNAPSHOT"
	id "dev.architectury.loom" version "0.7.2-SNAPSHOT" apply false

	id "com.github.breadmoirai.github-release" version "2.2.12"
	id "org.ajoberstar.grgit" version "4.1.0"
}

architectury {
	minecraft = rootProject.minecraft_version
}

subprojects {
	apply plugin: "dev.architectury.loom"

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"

		// This library loads in OSX, but not in Windows - I'm including it here so I can compile on Windows
		implementation "ca.weblite:java-objc-bridge:1.0.0"
	}
}

String getGitVersion(Project project) {
	if (grgit != null) {
		if (grgit.describe(tags: true) == "${project.mod_version}") {
			return "${project.mod_version}"
		} else {
			var dirty = grgit.status().clean ? "" : "dirty"
			return "${project.mod_version}-dev.${grgit.head().abbreviatedId}+${dirty}"
		}
	} else {
		return "${project.mod_version}-dev.unknown"
	}
}

String getChangelog(String githubUrl) {
	// Get changes since the last tag
	return grgit.log(includes: ["HEAD"], excludes: [
			// Get the last tag, removing the number of commits since the tag and the current HEAD~ hash
			grgit.describe(commit: "HEAD~", tags: true).replaceAll("-\\d+-[a-z0-9]+\$", "")
	]).collect {
		"- ${it.shortMessage} (${it.author.name})"
	}.join("\n") + (githubUrl == null ? "" : "\n\nSee the full changes on Github: ${githubUrl}commits/${grgit.describe(tags: true)}")
}

ext {
	changelog = getChangelog(rootProject.github_url)
	changelogGithub = getChangelog(null)
}

allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"
	apply plugin: "maven-publish"

	archivesBaseName = rootProject.archives_base_name
	version = getGitVersion(rootProject)
	group = rootProject.maven_group

	repositories {
		// Add repositories to retrieve artifacts from in here.
		// You should only use this when depending on other mods because
		// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
		// See https://docs.gradle.org/current/userguide/declaring_repositories.html
		// for more information about repositories.
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"

		// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
		// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
		// We'll use that if it's available, but otherwise we'll use the older option.
		def targetVersion = 8
		if (JavaVersion.current().isJava9Compatible()) {
			options.release = targetVersion
		}
	}

	java {
		withSourcesJar()
	}
}

configurations {
	githubReleaseJars {
		canBeConsumed = false
		canBeResolved = true
	}
}

dependencies {
	githubReleaseJars(project(path: ":fabric", configuration: "remapJarOutput"))
	githubReleaseJars(project(path: ":forge", configuration: "remapJarOutput"))
}

if (System.getenv("GITHUB_TOKEN")) {
	githubRelease {
		owner = rootProject.github_repo_user
		repo = rootProject.github_repo_name
		tagName = rootProject.mod_version
		releaseName = "Release ${rootProject.mod_version}"
		targetCommitish = "1.16-arch"
		draft = false
		body = rootProject.ext.changelogGithub
		token System.getenv("GITHUB_TOKEN")
		releaseAssets.from(rootProject.configurations.githubReleaseJars)
		overwrite = true
	}

	publish.dependsOn(tasks.githubRelease)
}